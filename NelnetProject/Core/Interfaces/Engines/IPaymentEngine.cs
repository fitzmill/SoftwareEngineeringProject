using Core.DTOs;
using System;
using System.Collections.Generic;

namespace Core.Interfaces.Engines
{
    /// <summary>
    /// Interface for engine that relates to PaymentSpring logic.
    /// </summary>
    public interface IPaymentEngine
    {
        /// <summary>
        /// Charges a list of payments and returns the results.
        /// </summary>
        /// <param name="charges">List of unsettled transactions to charge.</param>
        /// <param name="today">Today's date.</param>
        /// <returns>Results of all the charges.</returns>
        IEnumerable<Transaction> ChargePayments(List<Transaction> charges, DateTime today);

        /// <summary>
        /// Generates all payments due during the next period and sends them to the database.
        /// </summary>
        /// <param name="today">Today's date.</param>
        /// <returns>List of all upcoming transactions to be sent as notifications.</returns>
        IEnumerable<Transaction> GeneratePayments(IEnumerable<User> users, DateTime today);

        /// <summary>
        /// Gets the date and amount of the next payment for the user based on their userID
        /// </summary>
        /// <param name="userID">The id of the user to generate a payment for</param>
        /// <param name="today">Today's date.</param>
        /// <returns></returns>
        Transaction CalculateNextPaymentForUser(int userID, DateTime today);

        /// <summary>
        /// Calculates the numeric amount that will be due each period for the given user.
        /// </summary>
        /// <param name="user">A user with a payment plan and one or more students</param>
        /// <returns>The periodic payment amount</returns>
        double CalculatePeriodicPayment(User user);

        /// <summary>
        /// Insert new payment info into PaymentSpring
        /// </summary>
        /// <param name="userPaymentInfo">The payment info to be stored in PaymentSpring</param>
        /// <returns>The customer id generated by PaymentSpring</returns>
        string InsertPaymentInfo(UserPaymentInfoDTO userPaymentInfo);

        /// <summary>
        /// Updates a user's name and address information on PaymentSpring
        /// </summary>
        /// <param name="paymentAddressInfo">The billing address information to update in PaymentSpring</param>
        void UpdatePaymentBillingInfo(PaymentAddressDTO paymentAddressInfo);

        /// <summary>
        /// Updates a user's card information on PaymentSpring
        /// </summary>
        /// <param name="paymentCardInfo">The card information to update in PaymentSpring</param>
        void UpdatePaymentCardInfo(PaymentCardDTO paymentCardInfo);

        /// <summary>
        /// Delete the payment information from PaymentSpring
        /// </summary>
        /// <param name="customerID">The id of the customer to be deleted</param>
        void DeletePaymentInfo(string customerID);

        /// <summary>
        /// Gets a user's payment info from PaymentSpring with their customer ID.
        /// </summary>
        /// <param name="customerID">The customer id associated with the desired payment information</param>
        /// <returns>A user's payment info provided by PaymentSpring</returns>
        UserPaymentInfoDTO GetPaymentInfoForUser(int userID);

    }
}
